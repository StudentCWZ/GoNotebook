/*
   @Author: StudentCWZ
   @Description:
   @File: main
   @Software: GoLand
   @Project: GoNotebook
   @Date: 2022/5/12 09:18
*/

package main

/*
	1. 相比 Erlang，Go 并未实现严格的并发安全。
	2. Go 允许全局变量、指针、引用类型这些非安全内存共享操作，就需要开发人员自行维护数据一致和完全性。
	3. Go 鼓励使用 CSP 通道，以通信来替代内存共享，实现并发安全。
	4. 通过消息来避免竞态的模型除了 CSP，还有 Actor。但两者有很大区别。
	5. 作为 CSP 核心，通道(channel) 是显式的，要求操作双方必须知道数据类型和具体通道，并不关心另一端操作者身份和数量。可如果另一端未准备
       妥当，或消息未能及时处理时，会阻塞当前端。
	6. 相比起来，Actor 是透明的，它不在乎数据类型及通道，只要直到接收者信箱即可。默认就是异步方式，发送方对消息是否被接收和处理并不关心。
	7. 从底层实现来说，通道只是一个队列。同步模式下，发送和接收双方配对，然后直接复制数据给对方。如配对失败，则置入等待队列，直到另一方出现后才
       被唤醒。异步模式抢夺的则是数据缓冲槽。发送方有空槽可供写入，而接收方则要求有缓冲数据可读。需求不符时，同样加入等待队列，直到有另一方写入
       数据或腾出空槽被唤醒。
	8. 除传递消息外，通道还常被用作事件通知。
*/

func main() {
	done := make(chan struct{}) // 结束事件
	c := make(chan string)      // 数据传输通道

	go func() {
		s := <-c // 接收消息
		println(s)
		close(done) // 关闭通道，作为结束通知
	}()

	c <- "hi!" // 发送信息
	<-done     // 阻塞，直到有数据或管道关闭
}
