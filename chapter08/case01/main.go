/*
   @Author: StudentCWZ
   @Description:
   @File: main
   @Software: GoLand
   @Project: GoNotebook
   @Date: 2022/5/9 14:54
*/

package main

import "time"

/*
	1. 在开始本章之前，需要了解并发和并行的区别。
       - 并发：逻辑上具备同时处理多个任务的能力。
       - 并行：物理上在同一时刻执行多个并发任务。
	2. 我们通常会说程序是并发设计的，也就是说它允许多个任务同时执行，但实际上并不一定真在同一时刻发生。在单核处理器上，它们以间隔方式切换执行。
       而并行则依赖多核处理器等物理设备，让多个任务真正在同一时刻执行，它代表了当前程序运行状态。简单点来说，并行是并发设计的理想执行模式。
	3. 多线程或多进程是并行的基本条件，但单线程也可用协程做到并发。尽管协程在单个线程上通过主动切换来实现多任务并发，但它也有自己的优势。
	4. 除了将因阻塞而浪费的时间成本找回来外，还免去了线程切换开销，有着不错的执行效率。协程上运行的多个任务本质上是依旧串行，加上可控自主调度，
       所以并不需要做同步处理。
	5. 简单将 goroutine 归纳为协程并不合适。运行时会创建多个线程来执行并发任务，且任务单元可被调度到其他线程并行执行。这更像是多线程和协程的
       综合体，能最大限度提升执行效率，发挥多核处理能力。
	6. 只需在函数调用前添加 go 关键字即可查创建并发任务。
*/

func test() {
	go println("hello, world!")
	go func(s string) {
		println(s)
	}("hello, world!")
}

func main() {
	test()
	time.Sleep(time.Second * 2)
}
